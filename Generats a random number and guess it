<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Number Guessing Game</title>
    <style>
        /* CSS Styles */
        :root {
            --primary: #6c5ce7;
            --secondary: #a29bfe;
            --accent: #fd79a8;
            --light: #f8f9fa;
            --dark: #343a40;
            --success: #00b894;
            --warning: #fdcb6e;
            --danger: #d63031;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0;
            padding: 0;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: var(--light);
            animation: gradientShift 15s ease infinite;
            background-size: 200% 200%;
        }

        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .container {
            background-color: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 2rem;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
            text-align: center;
            transition: transform 0.3s ease;
        }

        .container:hover {
            transform: translateY(-5px);
        }

        h1 {
            margin-top: 0;
            font-size: 2.5rem;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
            color: white;
        }

        .description {
            margin-bottom: 2rem;
            line-height: 1.6;
            font-size: 1.1rem;
        }

        .game-area {
            margin-bottom: 2rem;
        }

        input[type="number"] {
            width: 70%;
            padding: 12px 15px;
            border: none;
            border-radius: 50px;
            background-color: rgba(255, 255, 255, 0.2);
            color: white;
            font-size: 1.2rem;
            text-align: center;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
            outline: none;
        }

        input[type="number"]:focus {
            background-color: rgba(255, 255, 255, 0.3);
            transform: scale(1.05);
        }

        input[type="number"]::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }

        button {
            background-color: var(--accent);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 50px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: bold;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        button:hover {
            background-color: #e84393;
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        }

        button:active {
            transform: translateY(1px);
        }

        .message {
            margin-top: 1.5rem;
            padding: 15px;
            border-radius: 10px;
            font-weight: bold;
            opacity: 0;
            transition: opacity 0.5s ease;
            min-height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .message.show {
            opacity: 1;
        }

        .success {
            background-color: rgba(0, 184, 148, 0.3);
            border: 2px solid var(--success);
        }

        .warning {
            background-color: rgba(253, 203, 110, 0.3);
            border: 2px solid var(--warning);
        }

        .danger {
            background-color: rgba(214, 48, 49, 0.3);
            border: 2px solid var(--danger);
        }

        .attempts {
            font-size: 1.1rem;
            margin-top: 1rem;
        }

        .confetti {
            position: absolute;
            width: 10px;
            height: 10px;
            background-color: var(--accent);
            opacity: 0;
        }

        @media (max-width: 600px) {
            .container {
                padding: 1.5rem;
                width: 85%;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            input[type="number"] {
                width: 80%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Guess the Number</h1>
        <p class="description">I'm thinking of a number between 1 and 100. Can you guess what it is?</p>
        
        <div class="game-area">
            <input type="number" id="guessInput" placeholder="Enter your guess" min="1" max="100">
            <button id="guessButton">Submit Guess</button>
            <button id="newGameButton" style="display: none; margin-top: 10px; background-color: var(--secondary);">New Game</button>
        </div>
        
        <div id="message" class="message"></div>
        <div class="attempts" id="attempts">Attempts: 0</div>
    </div>

    <script>
        // JavaScript
        document.addEventListener('DOMContentLoaded', () => {
            // Game variables
            let targetNumber = Math.floor(Math.random() * 100) + 1;
            let attempts = 0;
            const maxAttempts = 10;
            let gameOver = false;
            
            // DOM elements
            const guessInput = document.getElementById('guessInput');
            const guessButton = document.getElementById('guessButton');
            const newGameButton = document.getElementById('newGameButton');
            const messageElement = document.getElementById('message');
            const attemptsElement = document.getElementById('attempts');
            const container = document.querySelector('.container');
            
            // Focus input on load
            guessInput.focus();
            
            // Event listeners
            guessButton.addEventListener('click', checkGuess);
            newGameButton.addEventListener('click', startNewGame);
            guessInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    checkGuess();
                }
            });
            
            // Game functions
            function checkGuess() {
                if (gameOver) return;
                
                const userGuess = parseInt(guessInput.value);
                
                // Validate input
                if (isNaN(userGuess) || userGuess < 1 || userGuess > 100) {
                    showMessage('Please enter a valid number between 1 and 100', 'warning');
                    guessInput.value = '';
                    guessInput.focus();
                    return;
                }
                
                attempts++;
                attemptsElement.textContent = `Attempts: ${attempts}`;
                
                // Compare guess to target number
                if (userGuess === targetNumber) {
                    // Correct guess
                    showMessage(`Congratulations! You guessed the number ${targetNumber} in ${attempts} attempts!`, 'success');
                    gameOver = true;
                    guessButton.style.display = 'none';
                    newGameButton.style.display = 'inline-block';
                    createConfetti();
                } else if (attempts >= maxAttempts) {
                    // Game over
                    showMessage(`Game over! The number was ${targetNumber}.`, 'danger');
                    gameOver = true;
                    guessButton.style.display = 'none';
                    newGameButton.style.display = 'inline-block';
                } else {
                    // Provide hint
                    const hint = userGuess < targetNumber ? 'higher' : 'lower';
                    showMessage(`Wrong guess! Try a ${hint} number.`, 'warning');
                    guessInput.value = '';
                    guessInput.focus();
                }
            }
            
            function showMessage(msg, type) {
                messageElement.textContent = msg;
                messageElement.className = 'message ' + type;
                messageElement.classList.add('show');
                
                // Hide message after 5 seconds if it's not a success or game over message
                if (type !== 'success' && type !== 'danger') {
                    setTimeout(() => {
                        messageElement.classList.remove('show');
                    }, 3000);
                }
            }
            
            function startNewGame() {
                targetNumber = Math.floor(Math.random() * 100) + 1;
                attempts = 0;
                gameOver = false;
                attemptsElement.textContent = `Attempts: ${attempts}`;
                messageElement.textContent = '';
                messageElement.className = 'message';
                guessInput.value = '';
                guessButton.style.display = 'inline-block';
                newGameButton.style.display = 'none';
                guessInput.focus();
            }
            
            function createConfetti() {
                for (let i = 0; i < 100; i++) {
                    const confetti = document.createElement('div');
                    confetti.className = 'confetti';
                    confetti.style.left = Math.random() * 100 + 'vw';
                    confetti.style.top = -10 + 'px';
                    confetti.style.backgroundColor = getRandomColor();
                    confetti.style.width = Math.random() * 10 + 5 + 'px';
                    confetti.style.height = Math.random() * 10 + 5 + 'px';
                    confetti.style.borderRadius = Math.random() > 0.5 ? '50%' : '0';
                    document.body.appendChild(confetti);
                    
                    animateConfetti(confetti);
                }
            }
            
            function animateConfetti(element) {
                const animationDuration = Math.random() * 3 + 2;
                
                element.style.opacity = '1';
                element.style.transform = `rotate(${Math.random() * 360}deg)`;
                
                const animation = element.animate([
                    { top: '-10px', transform: 'rotate(0deg)' },
                    { top: '100vh', transform: 'rotate(360deg)' }
                ], {
                    duration: animationDuration * 1000,
                    easing: 'cubic-bezier(0.1, 0.8, 0.9, 1)'
                });
                
                animation.onfinish = () => {
                    element.remove();
                };
            }
            
            function getRandomColor() {
                const colors = ['#fd79a8', '#a29bfe', '#74b9ff', '#55efc4', '#ffeaa7'];
                return colors[Math.floor(Math.random() * colors.length)];
            }
        });
    </script>
</body>
</html>
